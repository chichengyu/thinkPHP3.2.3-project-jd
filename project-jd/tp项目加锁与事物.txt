找到tp框架下的\ThinkPHP\Library\Behavior行为目录下的读(ReadHtmlCacheBehavior.class.php)与写(WriteHtmlCacheBehavior.class.php)的两个文件,进行枷锁,防止雪崩问题
	1.在读文件中的run方法中,加入
	    //加锁
            //如果静态页不存在或已过期就向后执行,只让一个人通过这里生成静态页,让其他客户端等待第一个客户端生成静态页
            global $fp;
            $fp = fopen('./read_html_cache.lock', 'r');
            flock($fp,LOCK_EX);
            //判断静态页是否存在并且是否过期
            if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { //静态页面有效
                // 读取静态页面输出
                echo Storage::read(HTML_FILE_NAME,'html');
                exit();
            }
		注意：$fp必须是全局变量

	2.在首页方法index控制器下的index方法中,写入
		//加锁,防止雪崩情况
        	$file = uniqid();
        	file_put_contents('./piao/'.$file,'abc');
	    在根目录创建目录piao,进行测试加锁是否生效


	注意：锁是解决并发的,事物是解决数据完整性的

事物：
	如：下单过程中突然停电了,导致一部分数据插入到数据库了,还有一部分没有插入到数据库,那么数据就不完整
	
	使用事物的前提：相关表必须使用innoDB类型